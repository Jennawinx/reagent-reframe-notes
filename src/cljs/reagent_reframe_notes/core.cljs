(ns reagent-reframe-notes.core
  (:require
   [reagent.core :as reagent]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [reagent-reframe-notes.router.routes :as routes]
   [reagent-reframe-notes.router.views :as views]))

;; -------------------------
;; Routes

;; (def router
;;   (reitit/router
;;    [["/" :index]
;;     ["/items"
;;      ["" {:name :items
;;           :view [:h1 "hi"]}]
;;      ["/:item-id" :item]]
;;     ["/about" :about]]))

;; (defn path-for [route & [params]]
;;   (if params
;;     (:path (reitit/match-by-name router route params))
;;     (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

;; (defn home-page []
;;   (fn []
;;     [:span.main
;;      [:h1 "Welcome to reagent-reframe-notes"]
;;      [:ul
;;       [:li [:a {:href (path-for :items)} "Items of reagent-reframe-notes"]]]]))


;; (defn items-page []
;;   (fn []
;;     [:span.main
;;      [:h1 "The items of reagent-reframe-notes"]
;;      [:ul (map (fn [item-id]
;;                  [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
;;                   [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
;;                (range 1 60))]]))


;; (defn item-page []
;;   (fn []
;;     (let [routing-data (session/get :route)
;;           item (get-in routing-data [:route-params :item-id])]
;;       [:span.main
;;        [:h1 (str "Item " item " of reagent-reframe-notes")]
;;        [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


;; (defn about-page []
;;   (fn [] [:span.main
;;           [:h1 "About reagent-reframe-notes"]]))


;; -------------------------
;; Translate routes -> page components

;; (defn page-for [route]
;;   (case route
;;     :index #'home-page
;;     :about #'about-page
;;     :items #'items-page
;;     :item #'item-page))


;; -------------------------
;; Page mounting component

(defn nav []
  [:header
   #_[:p [:a {:href (path-for :index)} "Home"] " | "
    [:a {:href (path-for :about)} "About reagent-reframe-notes"]]])

(defn footer []
  [:footer
   [:p "reagent-reframe-notes was generated by the "
    [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]])

(defn app []
  (fn []
    [:div "Hi"]
    (let [page (:current-page (session/get :route))]
      [:div
       [nav]
       [page]
       [footer]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [app] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match        (reitit/match-by-path routes/router path)]        
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (views/view-for (:name (:data match)))
                              :route-params (:path-params match)})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path routes/router path)))})
  (accountant/dispatch-current!)
  (mount-root))
